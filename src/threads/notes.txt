Threads & Concurrency:

	Core:
		number of cores your processor has
	Single Core:
		both processes and threads are managed by OS scheduler thru time slicing and context switching to create an illusion of simultaneous exec
	Multi core:
		Both threads and processes can run in true parallelism on diff cores, with OS scheduler distributing taskc across the cores to optimize performance.
	Time Slicing:
		Def:
			divides CPU time into small intervals called time slices
		Function:
			The OS scheduler allocates these time slices to diff processes and threads, ensuring each gets a fair share of CPU time
		Purpose:
			this prevents any single process or thread from monopolizing the CPu, improving responsiveness and enablin concurrent exec.

	Program:
		set of instructions written in a programming language, that tells the computer how to perform a specific task
		MS word is a program which allows users to create and edit docs
	Process:
		Process is an instance of a program, that is being executed. When a progarm runs, the OS created a process to manage its execution
		when we open ms word, it becomes a process in the OS
	Process/Program:
		Each process runs on a core, like ms word is a process runs on a core
		If number of processes running are less than no of cores, then each process can run on multiple cores, utilizing extra cores to improve performance and thruput
	Thread:
		Part of a process, also called subprocess, A process can have multiple threads, which share same resources but can run independently.
		like in ms word, one thread is used to type, other to do spell check, other to auto-save
	Multitasking:
		Multi tasking allows OS to run multiple processes simultaneously. On single core it happens using context-switching.
	Context-switching:
		It's a mechanism of switching between threads/processes very fastly illuminating like everything happening at sametime.
	Multi threading:
		Multi threading refers to the ability to execute multiple threads within a single process concurrently. It enhances the efficiency of multitasking by breakign down indiv tasks into smaller sub-tasks or threads. Threse threads can be processed simultaneously, making better use of CPU's capabilities.

	When to use runnable and Thread
		Use Runnable when you've to create a thread when you're working with a class, which is already extending some other class, becauase you cannot extend other classl ike Thread which causes multiple inheritance.